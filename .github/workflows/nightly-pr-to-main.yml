name: Nightly PR to Main

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
      pull-request-id:
        required: true
        type: number
      org-name:
        required: false
        type: string
        default: 51degrees
      user:
        required: false
        type: string
        default: Automation51D
      email:
        required: false
        type: string
        default: "51DCI@51Degrees.com"
      dryrun:
        required: false
        type: string
        default: false
      cache-assets:
        default: false
        type: boolean
    secrets:
      token:
        required: true
      asset-keys:
        required: false

jobs:
  Configure:
    name : Configure - ${{ inputs.pull-request-id }} 
    runs-on: ubuntu-latest
    outputs:
      options: ${{ steps.configure.outputs.options }}
      asset-cache-key: ${{ steps.hash-asset-cache-key.outputs.hash }}
    steps:
    
      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Hash the Asset Cache Key
        id: hash-asset-cache-key
        if: inputs.cache-assets
        shell: pwsh
        env:
          KEY: ${{ secrets.asset-keys }}
        run: |
          $stringAsStream = [System.IO.MemoryStream]::new()
          $writer = [System.IO.StreamWriter]::new($stringAsStream)
          $writer.write($env:KEY)
          $writer.Flush()
          $stringAsStream.Position = 0
          "hash=$(Get-Date -Format FileDate)-$((Get-FileHash -InputStream $stringAsStream).Hash)" | Out-File $env:GITHUB_OUTPUT -Append

      - name: Configure
        shell: pwsh
        id: configure
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ./functions.ps1
          . ${{ github.workspace }}/common/nightly-pr-to-main_configure-pr.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -GitHubOutput $Env:GITHUB_OUTPUT `
          -PullRequestId ${{ inputs.pull-request-id }} `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          *>&1 | CaptureOutputForGit

  Build-and-Test:
    needs: Configure
    strategy:
      matrix:
        options: ${{ fromJSON(needs.configure.outputs.options ) }}
    name: Build and Test - ${{ inputs.pull-request-id }} - ${{ matrix.options.name }}
    runs-on: ${{ matrix.options.image }}
    
    steps:
      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Install Runtime
        if: matrix.options.Language != '' && matrix.options.LanguageVersion != ''
        uses: ./common/.github/actions/install_runtime
        with:
          language: ${{ matrix.options.Language }}
          version: ${{ matrix.options.LanguageVersion }}

      - name: Restore Asset Cache
        if: inputs.cache-assets
        uses: actions/cache/restore@v3
        with:
          key: ${{ needs.configure.outputs.asset-cache-key }}
          path: ${{ github.workspace }}/common/assets

      - name: Build and Test
        id: build-and-test
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ./functions.ps1
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')
          $Options.Add("Keys", $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}'))
          . ${{ github.workspace }}/common/nightly-pr-to-main_build-and-test.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -GitHubOutput $Env:GITHUB_OUTPUT `
          -PullRequestId ${{ inputs.pull-request-id }} `
          -Options $Options `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun `
          *>&1 | CaptureOutputForGit

      - name: Save Asset Cache
        if: inputs.cache-assets && always()
        uses: actions/cache/save@v3
        with:
          key: ${{ needs.configure.outputs.asset-cache-key }}
          path: ${{ github.workspace }}/common/assets

      - name: Publish Test Results
        if: always()
        uses: ./common/.github/actions/publish_test_results
        with:
          repo-name: ${{ inputs.repo-name }}
          name: ${{ matrix.options.name }}
          commit: ${{ steps.build-and-test.outputs.pr-sha }}
          skip-performance: ${{ !matrix.options.runperformance }}

      - name: Upload Performance Results Artifact
        uses: actions/upload-artifact@v3.1.2
        if: ${{ matrix.options.runperformance }}
        with:
          name: performance_results_${{ inputs.pull-request-id }}
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/test-results/performance-summary/results_*.json
          if-no-files-found: ignore
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: artifacts_${{ inputs.pull-request-id }}
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/artifacts/*
          if-no-files-found: ignore

  Compare-Performance:
    # This needs to run on Windows to support ScottPlot
    runs-on: windows-latest
    needs: [ Configure, Build-and-Test ]
    name: Compare Performance - ${{ inputs.pull-request-id }} 
    steps:
      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Download Performance Artifact
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: performance_results_${{ inputs.pull-request-id }}
          path: ${{ github.workspace }}/common

      - name: Compare Performance
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ./functions.ps1
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = $(ConvertFrom-Json -AsHashtable '${{ needs.configure.outputs.options }}')
          . ${{ github.workspace }}/common/nightly-pr-to-main_compare-performance.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -GitHubOutput $Env:GITHUB_OUTPUT `
          -PullRequestId ${{ inputs.pull-request-id }} `
          -Options $Options `
          -RunId ${{ github.run_id }} `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun `
          *>&1 | CaptureOutputForGit

      - name: Upload Successful Performance Results Artifact
        if: ${{ success()}}
        uses: actions/upload-artifact@v3.1.2
        with:
          name: performance_results_passed_${{ inputs.pull-request-id }}
          path: ${{ github.workspace }}/common/results_*.json
          if-no-files-found: ignore

  Complete:      
    runs-on: ubuntu-latest
    name: Complete ${{ inputs.pull-request-id }} 
    needs: [ Build-and-Test, Compare-Performance ]
    steps:

      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Complete
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ./functions.ps1
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          . ${{ github.workspace }}/common/nightly-pr-to-main_complete.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -PullRequestId ${{ inputs.pull-request-id }} `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun `
          *>&1 | CaptureOutputForGit
