name: Nightly Publish Main

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
      build-platform:
        required: true
        type: string
      org-name:
        required: false
        type: string
        default: 51degrees
      user:
        required: false
        type: string
        default: Automation51D
      email:
        required: false
        type: string
        default: "51DCI@51Degrees.com"
      dryrun:
        required: false
        type: string
        default: false
      cache-assets:
        default: false
        type: boolean
    secrets:
      # PAT that we use to authenticate on behalf of GitHub Actions.
      token:
        required: true
      # Any secrets needed for retrieving files, signing packages or tests.
      asset-keys:
        required: true

jobs:
  Configure:
    runs-on: ubuntu-latest
    outputs:
      asset-cache-key: ${{ steps.hash-asset-cache-key.outputs.hash }}
      options: ${{ steps.configure.outputs.options }}
      version: ${{ steps.configure.outputs.version }}
      update_required: ${{ steps.configure.outputs.update_required }}
    steps:
    
      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Hash the Asset Cache Key
        id: hash-asset-cache-key
        if: inputs.cache-assets
        shell: pwsh
        env:
          KEY: ${{ secrets.asset-keys }}
        run: |
          $stringAsStream = [System.IO.MemoryStream]::new()
          $writer = [System.IO.StreamWriter]::new($stringAsStream)
          $writer.write($env:KEY)
          $writer.Flush()
          $stringAsStream.Position = 0
          "hash=$(Get-Date -Format FileDate)-$((Get-FileHash -InputStream $stringAsStream).Hash)" | Out-File $env:GITHUB_OUTPUT -Append
        
      - name: Configure
        id: configure
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/functions.ps1
          . ${{ github.workspace }}/common/nightly-publish-main_configure.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -GitHubOutput $Env:GITHUB_OUTPUT `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          *>&1 | CaptureOutputForGit

  PreBuild:
    needs: Configure
    strategy:
      matrix:
        options: ${{ fromJSON(needs.configure.outputs.options ) }}
    name: Pre Build - ${{ matrix.options.name }}
    runs-on: ${{ matrix.options.image }}
    steps:
      - name: Checkout Common
        uses: actions/checkout@v3
        if: ${{ matrix.options.packagerequirement }}
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: PreBuild
        if: ${{ matrix.options.packagerequirement }}
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/functions.ps1
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')
          $Options.Add("Keys", $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}'))
          . ${{ github.workspace }}/common/nightly-publish-main_prebuild.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -Options $Options `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun `
          *>&1 | CaptureOutputForGit
          
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v3.1.2
        if: ${{ success() && matrix.options.packagerequirement }}
        with:
          name: package_${{ matrix.options.name }}
          path: ${{ github.workspace }}/common/package-files
          if-no-files-found: ignore   
          

  Build:
    runs-on: ${{ inputs.build-platform }}
    needs: [ PreBuild, Configure ]
    steps:
      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Download Package Artifacts
        if: ${{ success() }}
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/common/package-files

      - name: Build
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/functions.ps1
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = @{}
          $Options.Add("Keys", $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}'))
          $Options.Add("Version", "${{ needs.configure.outputs.version }}")
          . ${{ github.workspace }}/common/nightly-publish-main_build.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -Options $Options `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun `
          *>&1 | CaptureOutputForGit

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v3.1.2
        if: ${{ success() }}
        with:
          name: package
          path: ${{ github.workspace }}/common/package
          if-no-files-found: ignore   


  Test:
    needs: [ Build, Configure ]
    strategy:
      matrix:
        options: ${{ fromJSON(needs.configure.outputs.options ) }}
    name: Test - ${{ matrix.options.name }}
    runs-on: ${{ matrix.options.image }}
    
    steps:
      - name: Checkout Common
        if: ${{ matrix.options.packagerequirement }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Download Package Artifact
        if: ${{ success() && matrix.options.packagerequirement }}
        uses: actions/download-artifact@v3
        with:
          name: package
          path: ${{ github.workspace }}/common/package

      - name: Install Runtime
        if: matrix.options.Language != '' && matrix.options.LanguageVersion != ''
        uses: ./common/.github/actions/install_runtime
        with:
          language: ${{ matrix.options.Language }}
          version: ${{ matrix.options.LanguageVersion }}

      - name: Restore Asset Cache
        if: inputs.cache-assets
        uses: actions/cache/restore@v3
        with:
          key: ${{ needs.configure.outputs.asset-cache-key }}
          path: ${{ github.workspace }}/common/assets

      - name: Test
        shell: pwsh
        if: ${{ success() && matrix.options.packagerequirement }}
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/functions.ps1
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')
          $Options.Add("Keys", $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}'))
          . ${{ github.workspace }}/common/nightly-publish-main_test.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -Options $Options `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun `
          *>&1 | CaptureOutputForGit

      - name: Save Asset Cache
        if: inputs.cache-assets && always()
        uses: actions/cache/save@v3
        with:
          key: ${{ needs.configure.outputs.asset-cache-key }}
          path: ${{ github.workspace }}/common/assets

      - name: Publish Test Results
        if: matrix.options.packagerequirement
        uses: ./common/.github/actions/publish_test_results
        with:
          repo-name: ${{ inputs.repo-name }}
          name: ${{ matrix.options.name }}
          skip-unit: true
          skip-performance: true
          
  Package:      
    runs-on: ${{ inputs.build-platform }}
    needs: [ Test, Configure ]
    if: ${{ success() && needs.configure.outputs.update_required == 'true' }}
    steps:

      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common

      - name: Download Package Artifact
        if: ${{ success() }}
        uses: actions/download-artifact@v3
        with:
          name: package
          path: ${{ github.workspace }}/common/package

      - name: Package
        shell: pwsh
        if: ${{ success() }}
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/functions.ps1
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = @{}
          $Options.Add("Keys", $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}'))
          $Options.Add("Version", "${{ needs.configure.outputs.version }}")
          . ${{ github.workspace }}/common/nightly-publish-main_package.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -Options $Options `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun `
          *>&1 | CaptureOutputForGit
